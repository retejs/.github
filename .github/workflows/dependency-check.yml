name: Dependency Check

on:
  workflow_call:

jobs:
  check-dependencies:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install semver
        run: |
          mkdir -p ./.dependency-check/tmp
          cd ./.dependency-check/tmp
          npm init -y
          npm install semver@7

      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v4

      - name: Check dependencies version format
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            process.chdir('./.dependency-check/tmp')
            const semver = require('semver');
            const pkg = require('../package.json');
            const dependencies = [ ...Object.entries(pkg.dependencies || {}), ...Object.entries(pkg.devDependencies || {}), ...Object.entries(pkg.peerDependencies || {}) ];
            const invalidDependencies = dependencies.filter(([, version]) => !isValid(version))
      
            if (invalidDependencies.length > 0) {
              const invalidDepsList = invalidDependencies.map(([name, version]) => `${name}: ${version}`).join(', ');
              core.setFailed(`Invalid version format for dependencies: ${invalidDepsList}. Must be numerical (e.g., 0.1.2)`);
            }

            function isValid(version) {
              const ranges = getRanges(version)
              const stableRanges = ranges.map(isStable)

              return stableRanges.every(Boolean)
            }

            function getRanges(version) {
              const parts = version.split('||')
              return parts.flatMap(part => {
                try {
                  return semver.toComparators(part, { loose: true })
                } catch (e) {
                  console.warn(`Failed to parse version: ${part}`)
                  return [null]
                }
              }).map(range => range && range[0].replace(/^[\^~><=]+/, ''))
            }

            function isStable(v) {
              return semver.satisfies(semver.coerce(v), v)
            }
